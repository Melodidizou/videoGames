if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

var container;
var camera, scene, renderer;
var video, texture, material, mesh;
var composer;
var mouseX = 0;
var mouseY = 0;
var windowHalfX = window.innerWidth / 2;
var windowHalfY = window.innerHeight / 2;
var material;
var mappedKeyboard = [];
var h, counter = 1;
var velocity = 0.15;


{{ include('Engine/gamelib.js.twig') }}




init();
animate();


function init() {

  container = document.createElement( 'div' );
  document.body.appendChild( container );

  camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 10000 );
  camera.position.z = 500;

  scene = new THREE.Scene();
  var loader = new THREE.TextureLoader();
  var light = new THREE.DirectionalLight( 0xffffff );
  light.position.set( 0.5, 2, 1 ).normalize();
  scene.add( light );

  renderer = new THREE.WebGLRenderer( { antialias: false } );
  renderer.setPixelRatio( window.devicePixelRatio );
  renderer.setSize( window.innerWidth, window.innerHeight );
  container.appendChild( renderer.domElement );

// getFirstSequence()
  video = document.getElementById( 'video_00' );
  video.setAttribute('autoplay',true);

  texture = new THREE.VideoTexture( video );
  texture.minFilter = THREE.LinearFilter;
  texture.magFilter = THREE.LinearFilter;
  texture.format = THREE.RGBFormat;
  texture.needsUpdate = true;

  var geometry, xsize, ysize;

  xsize = 350 ;
  ysize = 280 ;
  zsize = 50 ;

  var parameters = { color: 0xffffff, map: texture };

  material = new THREE.MeshLambertMaterial( parameters );

  geometry = new THREE.BoxGeometry( xsize, ysize, zsize );


// game.getIsMappedVideo
  // change_uvs( geometry, 1, 1, 0.1, 0 );

    mesh = new THREE.Mesh( geometry, material );

    mesh.position.x = 0;
    mesh.position.y = 0;
    mesh.position.z = 0;

    mesh.scale.x = mesh.scale.y = mesh.scale.z = 1;

    scene.add( mesh );

  renderer.autoClear = false;

  document.addEventListener( 'mousemove', onDocumentMouseMove, false );

  // postprocessing

  var renderModel = new THREE.RenderPass( scene, camera );
  var effectBloom = new THREE.BloomPass( 1.3 );
  var effectCopy = new THREE.ShaderPass( THREE.CopyShader );

  effectCopy.renderToScreen = true;

  composer = new THREE.EffectComposer( renderer );

  composer.addPass( renderModel );
  composer.addPass( effectBloom );
  composer.addPass( effectCopy );


  window.addEventListener( 'resize', onWindowResize, false );

  mappedKeyboard = createMappedKeyboard(1,14,false);
  console.log(mappedKeyboard);
}


// game.velocityX velocityY
function onDocumentMouseMove(event) {

  mouseX = ( event.clientX - windowHalfX ) * 0.5;
  mouseY = ( event.clientY - windowHalfY ) * 0.4;

}

//

function animate() {

  requestAnimationFrame( animate );

  render();

}



function render() {

  var time = Date.now() * 0.0005;
  
  camera.position.x += ( mouseX - camera.position.x ) * 0.15;
  camera.position.y += ( - mouseY - camera.position.y ) * 0.15;

  camera.lookAt( scene.position );
  renderer.clear();
  composer.render();

}

var compteur = 0;
var maxCpt = 12;

var next = '15';

/** fct Ã  isoler dans game transition*/
function keypressActivate(e){
    var code = e.keyCode || e.which;
    if(mappedKeyboard[code] == undefined){
      console.log("Key not mapped "+e.keyCode+" "+code);
    }else{
      changeVideo(mappedKeyboard[code].zeroPad(10));
      compteur++;
    }
    console.log(compteur);
    if(maxCpt && (compteur > maxCpt)){
      changeVideo(next);
      $(document).unbind('keypress');
    }
}


$(document).ready(function(){
    $('#video_00').on('ended',function(){
      $(document).bind('keypress', "e", keypressActivate);
    });
    $('#video_15').on('ended',function(){
      compteur = 0;
      maxCpt = false;
      mappedKeyboard = createMappedKeyboard(16,29,false);
      $(document).bind('keypress', "e", keypressActivate);
    });
  });
