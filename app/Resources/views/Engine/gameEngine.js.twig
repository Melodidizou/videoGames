if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

var container;
var camera, scene, renderer;
var video, texture_0, texture_1, material_0, material_1, mesh_0, mesh_1;
var active = 0;
var composer;
var mouseX = 0;
var mouseY = 0;
var windowHalfX = window.innerWidth / 2;
var windowHalfY = window.innerHeight / 2;
var mappedKeyboard = [];
var h, counter = 1;
var velocity = 0.15;

var textGeo,textMaterial;
var text1 = "Maintenant, appuyer sur les touches de votre \n   clavier pour faire chanter Julie Andrews";
var text2 = "Appuyer sur les touches de votre clavier     \n        pour faire chanter les enfants";
var text3 = "Appuies pour chanter tous ensembles";
var text4 = "Appuies pour chanter des paroles";
var text5 = "Debout! Lève toi et chantes !";
var textMesh;
var textHeight = 1;
var textSize = 12;
var textHover = 1;
var textCurveSegments = 4;
var bevelThickness = 2;
var bevelSize = 0.5;
var bevelSegments = 3;
var bevelEnabled = true;
var font = undefined;
var fontName = "optimer"; // helvetiker, optimer, gentilis, droid sans, droid serif
var fontWeight = "regular"; // regular bold

{{ include('Engine/gamelib.js.twig') }}




init();
animate();


function init() {

  container = document.createElement( 'div' );
  document.body.appendChild( container );

  camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 0.5, 10000 );
  camera.position.z = 500;

  scene = new THREE.Scene();
  var loader = new THREE.TextureLoader();
  var light = new THREE.DirectionalLight( 0xcccccc );
  light.position.set( 400, 200, 200 ).normalize();
  scene.add( light );

  var light2 = new THREE.DirectionalLight( 0xcccccc );
  light2.position.set( -400, -200, 200 ).normalize();
  scene.add( light2 );

  renderer = new THREE.WebGLRenderer( { antialias: false } );
  renderer.setPixelRatio( window.devicePixelRatio );
  renderer.setSize( window.innerWidth, window.innerHeight );
  container.appendChild( renderer.domElement );

  var firstVideoNumber = {{ game.getFirstSequenceNumber() }} ;
  video = document.getElementById( 'video_'+ firstVideoNumber.zeroPad(100) );
  video.setAttribute('autoplay',true);

  texture_0 = new THREE.VideoTexture( video );
  texture_0.minFilter = THREE.LinearFilter;
  texture_0.magFilter = THREE.LinearFilter;
  texture_0.format = THREE.RGBFormat;
  texture_0.needsUpdate = true;

  var geometry, xsize, ysize;


  xsize = {{ game.width }} ;
  ysize = {{ game.height }} ;
  zsize = {{ game.width }} ;

  material_0 = new THREE.MeshLambertMaterial( { color: 0xffffff, map: texture_0 } );
  material_0.transparent = true;
  material_1 = new THREE.MeshLambertMaterial( { color: 0xffffff } );
  material_1.transparent = true;
  material_1.opacity = 0;
  geometry = new THREE.BoxGeometry( xsize, ysize, zsize);

  mesh_0 = new THREE.Mesh( geometry, material_0 );
  mesh_0.position.x = 0;
  mesh_0.position.y = 0;
  mesh_0.position.z = 0;

  mesh_0.scale.x = mesh_0.scale.y = mesh_0.scale.z = 0.5;

  scene.add( mesh_0 );

  mesh_1 = new THREE.Mesh( geometry, material_1 );
  mesh_1.position.x = 0;
  mesh_1.position.y = 0;
  mesh_1.position.z = 0;

  mesh_1.scale.x = mesh_1.scale.y = mesh_1.scale.z = 0.5;

  scene.add( mesh_1 );

  renderer.autoClear = false;

  document.addEventListener( 'mousemove', onDocumentMouseMove, false );

  // postprocessing

  var renderModel = new THREE.RenderPass( scene, camera );
  var effectBloom = new THREE.BloomPass( 1.3 );
  var effectCopy = new THREE.ShaderPass( THREE.CopyShader );

  effectCopy.renderToScreen = true;

  composer = new THREE.EffectComposer( renderer );

  composer.addPass( renderModel );
  composer.addPass( effectBloom );
  composer.addPass( effectCopy );


  window.addEventListener( 'resize', onWindowResize, false );

}

// game.velocityX velocityY
function onDocumentMouseMove(event) {

  mouseX = ( event.clientX - windowHalfX ) * 0.8;
  mouseY = ( event.clientY - windowHalfY ) * 0.8;

}

function animate() {

  requestAnimationFrame( animate );
  render();

}

function render() {

  var time = Date.now() * 0.0005;
  camera.position.x += ( mouseX - camera.position.x ) * 0.25;
  camera.position.y += ( - mouseY - camera.position.y ) * 0.25;

  camera.lookAt( scene.position );
  renderer.clear();
  composer.render();

}

var compteur = 0;
var maxCpt = 16;

var next_1 = "015";
var next_2 = "030";
var next_3 = "045";
var next_4 = "060";

/** fct à isoler dans game transition*/
function keypressActivate(e){
    if(maxCpt && (compteur > maxCpt)){
      if(next_1){ console.log(next_1); changeVideo(next_1); }
      else if(next_2){ changeVideo(next_2); }
      else if(next_3){ changeVideo(next_3); }
      else if(next_4){ changeVideo(next_4); }
      if(next_1 || next_2 || next_3 || next_4){
        $(document).unbind('keypress');
        return;
      }
    }
    var code = e.keyCode || e.which;
    if(mappedKeyboard[code] == undefined){
      console.log("Key not mapped "+e.keyCode+" "+code);
    }else{
      changeVideo(mappedKeyboard[code].zeroPad(100));
      compteur++;
    }
}


$(document).ready(function(){
    $('#video_000').on('ended',function(){
      loadText(text1,false);
      mappedKeyboard = createMappedKeyboard(1,14,false);
      $(document).bind('keypress', "e", keypressActivate);
    });
    $('#video_015').on('ended',function(){
      loadText(text2,false);
      compteur = 0;
      next_1 = false;
      mappedKeyboard = createMappedKeyboard(16,29,false);
      $(document).bind('keypress', "e", keypressActivate);
    });
    $('#video_030').on('ended',function(){
      loadText(text3,false);
      compteur = 0;
      next_2 = false;
      mappedKeyboard = createMappedKeyboard(31,44,false);
      $(document).bind('keypress', "e", keypressActivate);
    });
    $('#video_045').on('ended',function(){
      loadText(text4,false);
      compteur = 0;
      next_3 = false;
      mappedKeyboard = createMappedKeyboard(46,59,false);
      $(document).bind('keypress', "e", keypressActivate);
    });
    $('#video_060').on('ended',function(){
      loadText(text5,false);
      compteur = 0;
      next_4 = false;
      mappedKeyboard = createMappedKeyboard(61,74,false);
      $(document).bind('keypress', "e", keypressActivate);
    });
  });
